/**
 * Integration test to validate the complete task format fix
 */
import { formatTaskMarkdown, formatArchitectureMarkdown, formatSpecificationsMarkdown, formatFileStructureMarkdown, formatPRDMarkdown } from '../lib/markdown';

describe('Complete Task Format Fix Integration', () => {
  
  test('Task export should produce clean GitHub-ready markdown', () => {
    // Simulate what would be generated by the new system
    const taskMarkdownContent = `# Setup Docker Configuration

## Context

This task establishes the containerization setup for the application using Docker for local development and deployment.

## Implementation Steps

1. Create Dockerfile at \`docker/Dockerfile\` with multi-stage build
2. Configure entrypoint script to start both UI and engine components  
3. Ensure port 8000 is exposed for external access
4. Set up virtual environment at \`/opt/venv\` with all runtime dependencies
5. Create docker-compose configuration for local development

## Required Libraries

docker, pytest, docker-py, poetry

## Documentation

Refer to the reference documentation for the required libraries listed above to understand their APIs, best practices, and implementation details before beginning development.

## Acceptance Criteria

- The Dockerfile resides at \`docker/Dockerfile\` and is referenced by CI workflows
- A successful \`docker build --tag splat/main:latest .\` produces an image that:
  - Exposes port 8000
  - Contains \`/app/src/splat\` directory and all compiled byteâ€‘code
  - Includes a virtual environment at \`/opt/venv\` with all runtime dependencies installed
  - Runs the entrypoint script without errors, launching both the UI and engine components`;

    const formatted = formatTaskMarkdown(taskMarkdownContent);
    
    // Verify proper GitHub issue format
    expect(formatted).toMatch(/^# [^\n]+\n/);
    expect(formatted).toContain('## Context');
    expect(formatted).toContain('## Implementation Steps');
    expect(formatted).toContain('## Required Libraries');
    expect(formatted).toContain('## Documentation'); 
    expect(formatted).toContain('## Acceptance Criteria');
    
    // Verify clean library extraction format (no JSON structure)
    expect(formatted).toContain('docker, pytest, docker-py, poetry');
    expect(formatted).not.toContain('"phase"');
    expect(formatted).not.toContain('"value"');
    expect(formatted).not.toContain('{"');
    
    // Verify proper markdown structure
    expect(formatted.split('\n').filter(line => line.startsWith('#')).length).toBeGreaterThan(0);
    expect(formatted).toMatch(/\n$/); // Should end with newline
  });

  test('All document types should format consistently', () => {
    const samplePRD = 'Create a todo application with CRUD operations';
    const sampleArchitecture = 'Use React frontend with Node.js backend';
    const sampleSpecs = 'Users can add, edit, delete, and view tasks';
    const sampleFileStructure = 'src/\n  components/\n  pages/\n  utils/';

    const formattedPRD = formatPRDMarkdown(samplePRD);
    const formattedArch = formatArchitectureMarkdown(sampleArchitecture);
    const formattedSpecs = formatSpecificationsMarkdown(sampleSpecs);
    const formattedFileStruct = formatFileStructureMarkdown(sampleFileStructure);

    // All should have proper titles
    expect(formattedPRD).toMatch(/^# Product Requirements Document\n/);
    expect(formattedArch).toMatch(/^# Architecture\n/);
    expect(formattedSpecs).toMatch(/^# Specifications\n/);
    expect(formattedFileStruct).toMatch(/^# File Structure\n/);

    // All should end with single newline
    [formattedPRD, formattedArch, formattedSpecs, formattedFileStruct].forEach(doc => {
      expect(doc).toMatch(/\n$/);
      expect(doc).not.toMatch(/\n\n$/);
    });
  });

  test('Library extraction format should be clean and consistent', () => {
    // Test various library extraction scenarios
    const taskWithLibraries = `# Build Authentication System

## Implementation Steps

Install packages with npm install bcryptjs jsonwebtoken express mongoose
Set up JWT middleware and password hashing

## Required Libraries

bcryptjs, jsonwebtoken, express, mongoose

## Documentation

Refer to the reference documentation for the required libraries listed above.`;

    const formatted = formatTaskMarkdown(taskWithLibraries);
    
    // Should have clean comma-separated library list
    expect(formatted).toContain('bcryptjs, jsonwebtoken, express, mongoose');
    
    // Should NOT have old JSON format
    expect(formatted).not.toContain('"phase": "REQUIRED LIBRARIES"');
    expect(formatted).not.toContain('"value": "bcryptjs, jsonwebtoken"');
    expect(formatted).not.toContain('{"phase": "Documentation"');
    
    // Should have proper markdown structure
    expect(formatted).toContain('## Required Libraries');
    expect(formatted).toContain('## Documentation');
  });

  test('Export format should be ready for GitHub issues', () => {
    const mockTask = {
      title: 'Implement User Dashboard',
      details: `# Implement User Dashboard

## Context

Create a responsive user dashboard that displays user profile information and recent activity.

## Implementation Steps

1. Create Dashboard component with responsive grid layout
2. Implement user profile section with avatar and basic info
3. Add recent activity feed with pagination
4. Integrate with user API endpoints
5. Add loading states and error handling

## Required Libraries

react, typescript, tailwindcss, react-router-dom, axios

## Documentation

Refer to the reference documentation for the required libraries listed above to understand their APIs, best practices, and implementation details before beginning development.

## Acceptance Criteria

- Dashboard displays user profile information correctly
- Recent activity feed shows last 10 activities with pagination
- Layout is responsive on mobile and desktop
- Loading states are shown during API calls
- Error handling displays appropriate messages`
    };

    // Simulate the export process
    const _taskNumber = '001';
    const exportContent = formatTaskMarkdown(mockTask.details);
    
    // This is what would go into task-001.md
    expect(exportContent).toMatch(/^# Implement User Dashboard\n/);
    expect(exportContent).toContain('## Context');
    expect(exportContent).toContain('react, typescript, tailwindcss, react-router-dom, axios');
    
    // Should be valid markdown that GitHub can render
    expect(exportContent).not.toContain('undefined');
    expect(exportContent).not.toContain('null');
    expect(exportContent).not.toContain('[object Object]');
    
    // Should have proper structure for GitHub issue submission
    const lines = exportContent.split('\n');
    const headerLines = lines.filter(line => line.startsWith('#'));
    expect(headerLines.length).toBeGreaterThan(1); // Title + section headers
    
    const h1Count = lines.filter(line => line.startsWith('# ')).length;
    expect(h1Count).toBe(1); // Only one main title
  });
});
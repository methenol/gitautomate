{
  "name": "react",
  "source": "official",
  "url": "https://react.dev/learn",
  "content": "Quick Start – ReactJoin us for React Conf on Oct 7-8.[Learn more.](https://conf.react.dev/)[](/)[React](/)[v19.1](/versions)Search⌘CtrlK[Learn](/learn)[Reference](/reference/react)[Community](/community)[Blog](/blog)[](/community/translations)[](https://github.com/facebook/react/releases)### GET STARTED\n\n[Quick Start ](/learn)[Tutorial: Tic-Tac-Toe ](/learn/tutorial-tic-tac-toe)[Thinking in React ](/learn/thinking-in-react)[Installation ](/learn/installation)[Creating a React App ](/learn/creating-a-react-app)[Build a React App from Scratch ](/learn/build-a-react-app-from-scratch)[Add React to an Existing Project ](/learn/add-react-to-an-existing-project)[Setup ](/learn/setup)[Editor Setup ](/learn/editor-setup)[Using TypeScript ](/learn/typescript)[React Developer Tools ](/learn/react-developer-tools)[React Compiler ](/learn/react-compiler)[Introduction ](/learn/react-compiler/introduction)[Installation ](/learn/react-compiler/installation)[Incremental Adoption ](/learn/react-compiler/incremental-adoption)[Debugging and Troubleshooting ](/learn/react-compiler/debugging)### LEARN REACT\n\n[Describing the UI ](/learn/describing-the-ui)[Your First Component ](/learn/your-first-component)[Importing and Exporting Components ](/learn/importing-and-exporting-components)[Writing Markup with JSX ](/learn/writing-markup-with-jsx)[JavaScript in JSX with Curly Braces ](/learn/javascript-in-jsx-with-curly-braces)[Passing Props to a Component ](/learn/passing-props-to-a-component)[Conditional Rendering ](/learn/conditional-rendering)[Rendering Lists ](/learn/rendering-lists)[Keeping Components Pure ](/learn/keeping-components-pure)[Your UI as a Tree ](/learn/understanding-your-ui-as-a-tree)[Adding Interactivity ](/learn/adding-interactivity)[Responding to Events ](/learn/responding-to-events)[State: A Component&#x27;s Memory ](/learn/state-a-components-memory)[Render and Commit ](/learn/render-and-commit)[State as a Snapshot ](/learn/state-as-a-snapshot)[Queueing a Series of State Updates ](/learn/queueing-a-series-of-state-updates)[Updating Objects in State ](/learn/updating-objects-in-state)[Updating Arrays in State ](/learn/updating-arrays-in-state)[Managing State ](/learn/managing-state)[Reacting to Input with State ](/learn/reacting-to-input-with-state)[Choosing the State Structure ](/learn/choosing-the-state-structure)[Sharing State Between Components ](/learn/sharing-state-between-components)[Preserving and Resetting State ](/learn/preserving-and-resetting-state)[Extracting State Logic into a Reducer ](/learn/extracting-state-logic-into-a-reducer)[Passing Data Deeply with Context ](/learn/passing-data-deeply-with-context)[Scaling Up with Reducer and Context ](/learn/scaling-up-with-reducer-and-context)[Escape Hatches ](/learn/escape-hatches)[Referencing Values with Refs ](/learn/referencing-values-with-refs)[Manipulating the DOM with Refs ](/learn/manipulating-the-dom-with-refs)[Synchronizing with Effects ](/learn/synchronizing-with-effects)[You Might Not Need an Effect ](/learn/you-might-not-need-an-effect)[Lifecycle of Reactive Effects ](/learn/lifecycle-of-reactive-effects)[Separating Events from Effects ](/learn/separating-events-from-effects)[Removing Effect Dependencies ](/learn/removing-effect-dependencies)[Reusing Logic with Custom Hooks ](/learn/reusing-logic-with-custom-hooks)Is this page useful?\n\n[Learn React](/learn)# Quick Start\n\nWelcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.\n\n### You will learn\n\nHow to create and nest components\nHow to add markup and styles\nHow to display data\nHow to render conditions and lists\nHow to respond to events and update the screen\nHow to share data between components\n\n## Creating and nesting components \n\nReact apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\n\nReact components are JavaScript functions that return markup:\n\n```\nfunction MyButton() {  return (    &lt;button&gt;I&#x27;m a button&lt;/button&gt;  );}\n```\n\nNow that you’ve declared `MyButton`, you can nest it into another component:\n\n```\nexport default function MyApp() {  return (    &lt;div&gt;      &lt;h1&gt;Welcome to my app&lt;/h1&gt;      &lt;MyButton /&gt;    &lt;/div&gt;  );}\n```\n\nNotice that `&lt;MyButton /&gt;` starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\n\nHave a look at the result:\n\nApp.jsApp.jsReloadClear[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app)function MyButton() {\n  return (\n    &lt;button&gt;\n      I&#x27;m a button\n    &lt;/button&gt;\n  );\n}\n\nexport default function MyApp() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to my app&lt;/h1&gt;\n      &lt;MyButton /&gt;\n    &lt;/div&gt;\n  );\n}\n\nShow more\nThe `export default` keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, [MDN](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export) and [javascript.info](https://javascript.info/import-export) have great references.\n\n## Writing markup with JSX \n\nThe markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience. All of the [tools we recommend for local development](/learn/installation) support JSX out of the box.\n\nJSX is stricter than HTML. You have to close tags like `&lt;br /&gt;`. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a `&lt;div&gt;...&lt;/div&gt;` or an empty `&lt;&gt;...&lt;/&gt;` wrapper:\n\n```\nfunction AboutPage() {  return (    &lt;&gt;      &lt;h1&gt;About&lt;/h1&gt;      &lt;p&gt;Hello there.&lt;br /&gt;How do you do?&lt;/p&gt;    &lt;/&gt;  );}\n```\n\nIf you have a lot of HTML to port to JSX, you can use an [online converter.](https://transform.tools/html-to-jsx)\n\n## Adding styles \n\nIn React, you specify a CSS class with `className`. It works the same way as the HTML [`class`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class) attribute:\n\n```\n&lt;img className=&quot;avatar&quot; /&gt;\n```\n\nThen you write the CSS rules for it in a separate CSS file:\n\n```\n/* In your CSS */.avatar {  border-radius: 50%;}\n```\n\nReact does not prescribe how you add CSS files. In the simplest case, you’ll add a [`&lt;link&gt;`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.\n\n## Displaying data \n\nJSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display `user.name`:\n\n```\nreturn (  &lt;h1&gt;    {user.name}  &lt;/h1&gt;);\n```\n\nYou can also “escape into JavaScript” from JSX attributes, but you have to use curly braces instead of quotes. For example, `className=&quot;avatar&quot;` passes the `&quot;avatar&quot;` string as the CSS class, but `src={user.imageUrl}` reads the JavaScript `user.imageUrl` variable value, and then passes that value as the `src` attribute:\n\n```\nreturn (  &lt;img    className=&quot;avatar&quot;    src={user.imageUrl}  /&gt;);\n```\n\nYou can put more complex expressions inside the JSX curly braces too, for example, [string concatenation](https://javascript.info/operators#string-concatenation-with-binary):\n\nApp.jsApp.jsReloadClear[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app)const user = {\n  name: &#x27;Hedy Lamarr&#x27;,\n  imageUrl: &#x27;https://i.imgur.com/yXOvdOSs.jpg&#x27;,\n  imageSize: 90,\n};\n\nexport default function Profile() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{user.name}&lt;/h1&gt;\n      &lt;img\n        className=&quot;avatar&quot;\n        src={user.imageUrl}\n        alt={&#x27;Photo of &#x27; + user.name}\n        style={{\n          width: user.imageSize,\n          height: user.imageSize\n        }}\n      /&gt;\n    &lt;/&gt;\n  );\n}\n\nShow more\nIn the above example, `style={{}}` is not a special syntax, but a regular `{}` object inside the `style={ }` JSX curly braces. You can use the `style` attribute when your styles depend on JavaScript variables.\n\n## Conditional rendering \n\nIn React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement to conditionally include JSX:\n\n```\nlet content;if (isLoggedIn) {  content = &lt;AdminPanel /&gt;;} else {  content = &lt;LoginForm /&gt;;}return (  &lt;div&gt;    {content}  &lt;/div&gt;);\n```\n\nIf you prefer more compact code, you can use the [conditional `?` operator.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) Unlike `if`, it works inside JSX:\n\n```\n&lt;div&gt;  {isLoggedIn ? (    &lt;AdminPanel /&gt;  ) : (    &lt;LoginForm /&gt;  )}&lt;/div&gt;\n```\n\nWhen you don’t need the `else` branch, you can also use a shorter [logical `&amp;&amp;` syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation):\n\n```\n&lt;div&gt;  {isLoggedIn &amp;&amp; &lt;AdminPanel /&gt;}&lt;/div&gt;\n```\n\nAll of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using `if...else`.\n\n## Rendering lists \n\nYou will rely on JavaScript features like [`for` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) and the [array `map()` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to render lists of components.\n\nFor example, let’s say you have an array of products:\n\n```\nconst products = [  { title: &#x27;Cabbage&#x27;, id: 1 },  { title: &#x27;Garlic&#x27;, id: 2 },  { title: &#x27;Apple&#x27;, id: 3 },];\n```\n\nInside your component, use the `map()` function to transform an array of products into an array of `&lt;li&gt;` items:\n\n```\nconst listItems = products.map(product =&gt;  &lt;li key={product.id}&gt;    {product.title}  &lt;/li&gt;);return (  &lt;ul&gt;{listItems}&lt;/ul&gt;);\n```\n\nNotice how `&lt;li&gt;` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.\n\nApp.jsApp.jsReloadClear[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app)const products = [\n  { title: &#x27;Cabbage&#x27;, isFruit: false, id: 1 },\n  { title: &#x27;Garlic&#x27;, isFruit: false, id: 2 },\n  { title: &#x27;Apple&#x27;, isFruit: true, id: 3 },\n];\n\nexport default function ShoppingList() {\n  const listItems = products.map(product =&gt;\n    &lt;li\n      key={product.id}\n      style={{\n        color: product.isFruit ? &#x27;magenta&#x27; : &#x27;darkgreen&#x27;\n      }}\n    &gt;\n      {product.title}\n    &lt;/li&gt;\n  );\n\n  return (\n    &lt;ul&gt;{listItems}&lt;/ul&gt;\n  );\n}\n\nShow more\n## Responding to events \n\nYou can respond to events by declaring event handler functions inside your components:\n\n```\nfunction MyButton() {  function handleClick() {    alert(&#x27;You clicked me!&#x27;);  }  return (    &lt;button onClick={handleClick}&gt;      Click me    &lt;/button&gt;  );}\n```\n\nNotice how `onClick={handleClick}` has no parentheses at the end! Do not call the event handler function: you only need to pass it down. React will call your event handler when the user clicks the button.\n\n## Updating the screen \n\nOften, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add state to your component.\n\nFirst, import [`useState`](/reference/react/useState) from React:\n\n```\nimport { useState } from &#x27;react&#x27;;\n```\n\nNow you can declare a state variable inside your component:\n\n```\nfunction MyButton() {  const [count, setCount] = useState(0);  // ...\n```\n\nYou’ll get two things from `useState`: the current state (`count`), and the function that lets you update it (`setCount`). You can give them any names, but the convention is to write `[something, setSomething]`.\n\nThe first time the button is displayed, `count` will be `0` because you passed `0` to `useState()`. When you want to change state, call `setCount()` and pass the new value to it. Clicking this button will increment the counter:\n\n```\nfunction MyButton() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    &lt;button onClick={handleClick}&gt;      Clicked {count} times    &lt;/button&gt;  );}\n```\n\nReact will call your component function again. This time, `count` will be `1`. Then it will be `2`. And so on.\n\nIf you render the same component multiple times, each will get its own state. Click each button separately:\n\nApp.jsApp.jsReloadClear[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app)import { useState } from &#x27;react&#x27;;\n\nexport default function MyApp() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Counters that update separately&lt;/h1&gt;\n      &lt;MyButton /&gt;\n      &lt;MyButton /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction MyButton() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    &lt;button onClick={handleClick}&gt;\n      Clicked {count} times\n    &lt;/button&gt;\n  );\n}\n\nShow more\nNotice how each button “remembers” its own `count` state and doesn’t affect other buttons.\n\n## Using Hooks \n\nFunctions starting with `use` are called Hooks. `useState` is a built-in Hook provided by React. You can find other built-in Hooks in the [API reference.](/reference/react) You can also write your own Hooks by combining the existing ones.\n\nHooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). If you want to use `useState` in a condition or a loop, extract a new component and put it there.\n\n## Sharing data between components \n\nIn the previous example, each `MyButton` had its own independent `count`, and when each button was clicked, only the `count` for the button clicked changed:\n\nInitially, each `MyButton`’s `count` state is `0`\n\nThe first `MyButton` updates its `count` to `1`\n\nHowever, often you’ll need components to share data and always update together.\n\nTo make both `MyButton` components display the same `count` and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.\n\nIn this example, it is `MyApp`:\n\nInitially, `MyApp`’s `count` state is `0` and is passed down to both children\n\nOn click, `MyApp` updates its `count` state to `1` and passes it down to both children\n\nNow when you click either button, the `count` in `MyApp` will change, which will change both of the counts in `MyButton`. Here’s how you can express this in code.\n\nFirst, move the state up from `MyButton` into `MyApp`:\n\n```\nexport default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    &lt;div&gt;      &lt;h1&gt;Counters that update separately&lt;/h1&gt;      &lt;MyButton /&gt;      &lt;MyButton /&gt;    &lt;/div&gt;  );}function MyButton() {  // ... we&#x27;re moving code from here ...}\n```\n\nThen, pass the state down from `MyApp` to each `MyButton`, together with the shared click handler. You can pass information to `MyButton` using the JSX curly braces, just like you previously did with built-in tags like `&lt;img&gt;`:\n\n```\nexport default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    &lt;div&gt;      &lt;h1&gt;Counters that update together&lt;/h1&gt;      &lt;MyButton count={count} onClick={handleClick} /&gt;      &lt;MyButton count={count} onClick={handleClick} /&gt;    &lt;/div&gt;  );}\n```\n\nThe information you pass down like this is called props. Now the `MyApp` component contains the `count` state and the `handleClick` event handler, and passes both of them down as props to each of the buttons.\n\nFinally, change `MyButton` to read the props you have passed from its parent component:\n\n```\nfunction MyButton({ count, onClick }) {  return (    &lt;button onClick={onClick}&gt;      Clicked {count} times    &lt;/button&gt;  );}\n```\n\nWhen you click the button, the `onClick` handler fires. Each button’s `onClick` prop was set to the `handleClick` function inside `MyApp`, so the code inside of it runs. That code calls `setCount(count + 1)`, incrementing the `count` state variable. The new `count` value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.\n\nApp.jsApp.jsReloadClear[Fork](https://codesandbox.io/api/v1/sandboxes/define?undefined&amp;environment=create-react-app)import { useState } from &#x27;react&#x27;;\n\nexport default function MyApp() {\n  const [count, setCount] = useState(0);\n\n  function handleClick() {\n    setCount(count + 1);\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Counters that update together&lt;/h1&gt;\n      &lt;MyButton count={count} onClick={handleClick} /&gt;\n      &lt;MyButton count={count} onClick={handleClick} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction MyButton({ count, onClick }) {\n  return (\n    &lt;button onClick={onClick}&gt;\n      Clicked {count} times\n    &lt;/button&gt;\n  );\n}\n\nShow more\n## Next Steps \n\nBy now, you know the basics of how to write React code!\n\nCheck out the [Tutorial](/learn/tutorial-tic-tac-toe) to put them into practice and build your first mini-app with React.\n\n[NextTutorial: Tic-Tac-Toe](/learn/tutorial-tic-tac-toe)[](https://opensource.fb.com/)Copyright © Meta Platforms, Incno uwu plzuwu?Logo by[@sawaratsuki1004](https://twitter.com/sawaratsuki1004)[Learn React](/learn)[Quick Start](/learn)[Installation](/learn/installation)[Describing the UI](/learn/describing-the-ui)[Adding Interactivity](/learn/adding-interactivity)[Managing State](/learn/managing-state)[Escape Hatches](/learn/escape-hatches)[API Reference](/reference/react)[React APIs](/reference/react)[React DOM APIs](/reference/react-dom)[Community](/community)[Code of Conduct](https://github.com/facebook/react/blob/main/CODE_OF_CONDUCT.md)[Meet the Team](/community/team)[Docs Contributors](/community/docs-contributors)[Acknowledgements](/community/acknowledgements)More[Blog](/blog)[React Native](https://reactnative.dev/)[Privacy](https://opensource.facebook.com/legal/privacy)[Terms](https://opensource.fb.com/legal/terms/)[](https://www.facebook.com/react)[](https://twitter.com/reactjs)[](https://bsky.app/profile/react.dev)[](https://github.com/facebook/react)## On this page\n\n[Overview](#)[Creating and nesting components ](#components)[Writing markup with JSX ](#writing-markup-with-jsx)[Adding styles ](#adding-styles)[Displaying data ](#displaying-data)[Conditional rendering ](#conditional-rendering)[Rendering lists ](#rendering-lists)[Responding to events ](#responding-to-events)[Updating the screen ](#updating-the-screen)[Using Hooks ](#using-hooks)[Sharing data between components ](#sharing-data-between-components)[Next Steps ](#next-steps)",
  "contentType": "markdown",
  "lastFetched": "2025-09-05T00:12:56.466Z",
  "sizeKB": 20
}